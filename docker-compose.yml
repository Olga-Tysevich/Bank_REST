version: '3.8'

volumes:
  pg_bank_rest:
    name: pg_bank_rest_db_volume
    external: false

networks:
  bank_rest_net:
    driver: bridge

services:
  bank_rest_db:
    container_name: ${BANK_REST_DB_NAME}
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${BANK_REST_DB_USER}
      - POSTGRES_PASSWORD=${BANK_REST_DB_PASSWORD}
      - POSTGRES_DB=${BANK_REST_DB_NAME}
    volumes:
      - pg_bank_rest:/var/lib/postgresql/data
    ports:
      - ${BANK_REST_DB_HOST}:${BANK_REST_DB_EPORT}:${BANK_REST_DB_PORT}
    networks:
      - bank_rest_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BANK_REST_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  bank-rest-redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: redis:latest
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    ports:
      - ${REDIS_PORT_EPORT}:${REDIS_PORT}
    networks:
      - bank_rest_net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bank_rest:
    container_name: bank_rest
    restart: no
    build:
      context: ${APP_PATH}
      dockerfile: Dockerfile
    ports:
      - ${BANK_REST_APP_EPORT}:${BANK_REST_APP_PORT}
    depends_on:
      bank_rest_db:
        condition: service_healthy
      bank-rest-redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_APPLICATION_JSON: ${SPRING_APPLICATION_PARAMS}
      JAVA_OPTS: ${JV_MAX_MEM}
    networks:
      - bank_rest_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
